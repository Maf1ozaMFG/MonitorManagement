// Import MediaPipe's GestureRecognizer and utilities (from CDN)
import { GestureRecognizer, FilesetResolver, DrawingUtils } from "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.3";

class MonitorControlSPA {
  constructor() {
    // State flags
    this.isGestureActive = false;
    this.awaitingConfirmation = false;
    this.currentCommand = null;
    this.lastLoggedGesture = null;  // –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∂–µ—Å—Ç–∞
    this.placeholderImg = null;   // —Å—Å—ã–ª–∫–∞ –Ω–∞ <img>
    // Threshold settings (modifiable via sliders)
    this.gestureThreshold = 0.8;
    this.confidenceThreshold = 0.75;
    // MediaPipe and media elements
    this.gestureRecognizer = null;
    this.videoElement = null;
    this.canvasElement = null;
    this.canvasCtx = null;
    // Gesture tracking for stability
    this.lastGesture = null;
    this.lastGestureTime = 0;
    this.gestureStabilityCount = 0;
    this.currentPairLabel    = null; // —Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "labelLeft+labelRight"
    this.pairStartTime       = 0;    // –∫–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª–∞—Å—å —ç—Ç–∞ –ø–∞—Ä–∞
    this.lastLoggedGesturePair = null; // —á—Ç–æ–±—ã –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
    this.lastSingleLabel      = null;
    this.singleStartTime      = 0;
    this.lastLoggedSingle     = null;
    // –î–ª—è –ø–∞—Ä—ã –∂–µ—Å—Ç–æ–≤
    this.currentPairLabel       = null;
    this.pairStartTime          = 0;
    this.lastLoggedGesturePair  = null;
    // Mapping gesture labels to Russian words (for display)
    this.gestureMap = {
      'Closed_Fist': '–∫—É–ª–∞–∫',
      'Open_Palm':   '–ª–∞–¥–æ–Ω—å',
      'Pointing_Up': '—É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö',
      'Thumb_Up':    '–±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö',
      'Thumb_Down':  '–±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü –≤–Ω–∏–∑',
      'Victory':     '–∂–µ—Å—Ç "Victory"',       // V sign
      'ILoveYou':    '–∂–µ—Å—Ç "–Ø –ª—é–±–ª—é —Ç–µ–±—è"',   // ILY sign
      'OK':          '–∂–µ—Å—Ç "OK"'           // –∫—Ä—É–∂–æ–∫
    };

    // Initialize the application
    this.init();
  }

  // –í –º–µ—Ç–æ–¥–µ init() –¥–æ–±–∞–≤–∏—Ç—å:
async init() {
  this.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...', 'info');
  this.setupEventListeners();
  await this.initCamera();
  await this.initGestureRecognition();
  this.log('üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
}

  

  setupEventListeners() {
    // Connect UI buttons to their handlers
    document.getElementById('toggleGestures').addEventListener('click', () => {
      this.toggleGestures();
    });
    document.getElementById('calibrateBtn').addEventListener('click', () => {
      this.calibrate();
    });
    // Slider controls for thresholds
    document.getElementById('gestureThreshold').addEventListener('input', (e) => {
      this.gestureThreshold = parseFloat(e.target.value);
      document.getElementById('gestureThresholdValue').textContent =
        Math.round(this.gestureThreshold * 100) + '%';
    });
    document.getElementById('confidenceThreshold').addEventListener('input', (e) => {
      this.confidenceThreshold = parseFloat(e.target.value);
      document.getElementById('confidenceThresholdValue').textContent =
        Math.round(this.confidenceThreshold * 100) + '%';
    });
    // –í –º–µ—Ç–æ–¥–µ setupEventListeners() –¥–æ–±–∞–≤–∏—Ç—å:
    document.getElementById('clearLogBtn').addEventListener('click', () => {
      this.clearLog();
    });
  }

  async initCamera() {
    try {
      // Request access to the webcam
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { width: 1280, height: 720 },
        audio: false
      });
      // Set the video element source to the webcam stream
      this.videoElement = document.getElementById('videoElement');
      this.videoElement.srcObject = stream;
      // Prepare the overlay canvas for drawing
      this.canvasElement = document.getElementById('gestureCanvas');
      this.canvasCtx = this.canvasElement.getContext('2d');
      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≥–ª—É—à–∫—É
      this.placeholderImg = document.getElementById('placeholderImg');
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–∏–¥–µ–æ —Å–∫—Ä—ã—Ç–æ, –∑–∞–≥–ª—É—à–∫–∞ –≤–∏–¥–Ω–∞
      this.videoElement.style.display   = 'none';
      this.canvasElement.style.display  = 'none';
      this.placeholderImg.style.display = 'block';
      // Resize canvas to match video resolution once metadata is loaded
      this.videoElement.onloadedmetadata = () => {
        this.canvasElement.width = this.videoElement.videoWidth;
        this.canvasElement.height = this.videoElement.videoHeight;
      };
      this.log('–ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
    } catch (error) {
      this.log('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: ' + error.message, 'error');
    }
  }

  async initGestureRecognition() {
    try {
      // Initialize MediaPipe GestureRecognizer with the default model
      const vision = await FilesetResolver.forVisionTasks(
        "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.3/wasm"
      );
      this.gestureRecognizer = await GestureRecognizer.createFromOptions(vision, {
        baseOptions: {
          modelAssetPath: "https://storage.googleapis.com/mediapipe-models/gesture_recognizer/gesture_recognizer/float16/1/gesture_recognizer.task",
          delegate: "GPU"
        },
        runningMode: "VIDEO",  // live video mode
        numHands: 2          // expect at most one hand at a time
      });
      this.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', 'success');
    } catch (error) {
      this.log('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∂–µ—Å—Ç–æ–≤: ' + error.message, 'error');
    }
  }

  // Begin processing video frames for gestures (called when gestures are toggled on)
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ startGestureLoop —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π gesture-label
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ startGestureLoop —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π gesture-label
async startGestureLoop() {
  if (!this.isGestureActive || !this.gestureRecognizer) return;
  const now = Date.now();

  // –í—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤–∏–¥–µ–æ –Ω–∞ canvas, —á—Ç–æ–±—ã –Ω–µ ¬´–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—Ç—å¬ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  this.canvasCtx.save();
  this.canvasCtx.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
  this.canvasCtx.scale(-1, 1);
  this.canvasCtx.translate(-this.canvasElement.width, 0);
  
  this.canvasCtx.drawImage(
    this.videoElement,
    0, 0,
    this.canvasElement.width,
    this.canvasElement.height
  );
  this.canvasCtx.restore();

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
  const { gestures = [], landmarks = [] } = this.gestureRecognizer.recognizeForVideo(this.videoElement, now);

  const leftTextElem   = document.getElementById('gestureTextLeft');
  const rightTextElem  = document.getElementById('gestureTextRight');
  const leftConfElem   = document.getElementById('confidenceTextLeft');
  const rightConfElem  = document.getElementById('confidenceTextRight');
  const gestureTextElem = document.getElementById('gestureText'); // –≠–ª–µ–º–µ–Ω—Ç gesture-label

  // --- 0 —Ä—É–∫: —Å–±—Ä–æ—Å UI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
  if (landmarks.length === 0) {
    leftTextElem.textContent   = '–õ–µ–≤–∞—è: ‚Äî';
    rightTextElem.textContent  = '–ü—Ä–∞–≤–∞—è: ‚Äî';
    leftConfElem.textContent   = '‚Äî%';
    rightConfElem.textContent  = '‚Äî%';
    gestureTextElem.textContent = '–ñ–µ—Å—Ç: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';

    this.lastSingleLabel       = null;
    this.lastLoggedSingle      = null;
    this.currentPairLabel      = null;
    this.lastLoggedGesturePair = null;

  // --- 1 —Ä—É–∫–∞: –æ–¥–∏–Ω–æ—á–Ω—ã–π –∂–µ—Å—Ç ---
  } else if (landmarks.length === 1) {
    const { categoryName: lbl, score } = gestures[0][0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–µ—Å—Ç –Ω–µ "None" (–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω)
    if (lbl !== 'None') {
      const name = this.gestureMap[lbl] || lbl;

      // UI –¥–ª—è gesture-feedback
      leftTextElem.textContent   = `–û–¥–Ω–∞ —Ä—É–∫–∞: ${name}`;
      rightTextElem.textContent  = '–ü—Ä–∞–≤–∞—è: ‚Äî';
      leftConfElem.textContent   = `${Math.round(score * 100)}%`;
      rightConfElem.textContent  = '‚Äî%';
      
      // UI –¥–ª—è gesture-label
      gestureTextElem.textContent = `–ñ–µ—Å—Ç: ${name}`;

      // –õ–æ–≥–∏–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∂–µ—Å—Ç–∞ (2 —Å–µ–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è)
      if (lbl !== this.lastSingleLabel) {
        this.lastSingleLabel      = lbl;
        this.singleStartTime      = now;
        this.lastLoggedSingle     = null;
      } else if (!this.lastLoggedSingle && now - this.singleStartTime >= 2000) {
        this.log(`–ñ–µ—Å—Ç: ${name}`, 'info');
        this.lastLoggedSingle = lbl;
      }
    } else {
      // –ñ–µ—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
      leftTextElem.textContent   = '–û–¥–Ω–∞ —Ä—É–∫–∞: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';
      rightTextElem.textContent  = '–ü—Ä–∞–≤–∞—è: ‚Äî';
      leftConfElem.textContent   = '‚Äî%';
      rightConfElem.textContent  = '‚Äî%';
      gestureTextElem.textContent = '–ñ–µ—Å—Ç: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';
      
      this.lastSingleLabel = null;
      this.lastLoggedSingle = null;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä—É
    this.currentPairLabel      = null;
    this.lastLoggedGesturePair = null;

    // –†–∏—Å—É–µ–º —ç—Ç—É —Ä—É–∫—É
    this._drawSkeleton(landmarks);

  // --- ‚â•2 —Ä—É–∫: –ø–∞—Ä–Ω—ã–π –∂–µ—Å—Ç ---
  } else {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–µ–≤—É—é/–ø—Ä–∞–≤—É—é –ø–æ x –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –∑–∞–ø—è—Å—Ç—å—è
    // –ü–æ—Å–∫–æ–ª—å–∫—É –≤–∏–¥–µ–æ —Ç–µ–ø–µ—Ä—å –∑–µ—Ä–∫–∞–ª–∏—Ä—É–µ—Ç—Å—è, –º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É
    const x0 = landmarks[0][0].x, x1 = landmarks[1][0].x;
    const leftIdx  = x0 > x1 ? 0 : 1;  // –ò–∑–º–µ–Ω–∏–ª–∏ —Å < –Ω–∞ >
    const rightIdx = leftIdx === 0 ? 1 : 0;

    const gL = gestures[leftIdx][0], gR = gestures[rightIdx][0];
    const lblL = gL.categoryName, lblR = gR.categoryName;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∂–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    if (lblL !== 'None' || lblR !== 'None') {
      const nameL = lblL !== 'None' ? (this.gestureMap[lblL] || lblL) : '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';
      const nameR = lblR !== 'None' ? (this.gestureMap[lblR] || lblR) : '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';

      // UI –¥–ª—è gesture-feedback
      leftTextElem.textContent   = `–õ–µ–≤–∞—è: ${nameL}`;
      rightTextElem.textContent  = `–ü—Ä–∞–≤–∞—è: ${nameR}`;
      leftConfElem.textContent   = lblL !== 'None' ? `${Math.round(gL.score * 100)}%` : '‚Äî%';
      rightConfElem.textContent  = lblR !== 'None' ? `${Math.round(gR.score * 100)}%` : '‚Äî%';

      // UI –¥–ª—è gesture-label - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤—É—Ö —Ä—É–∫–∞—Ö
      gestureTextElem.textContent = `–õ–µ–≤–∞—è —Ä—É–∫–∞: ${nameL} - –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞: ${nameR}`;
      
      // –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—ã (2 —Å–µ–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –∂–µ—Å—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã
      if (lblL !== 'None' && lblR !== 'None') {
        const pairLabel = `${lblL}+${lblR}`;
        if (pairLabel !== this.currentPairLabel) {
          this.currentPairLabel      = pairLabel;
          this.pairStartTime         = now;
          this.lastLoggedGesturePair = null;
        } else if (!this.lastLoggedGesturePair && now - this.pairStartTime >= 2000) {
          this.log(`–ñ–µ—Å—Ç—ã: –ª–µ–≤–∞—è ‚Äî ${nameL}; –ø—Ä–∞–≤–∞—è ‚Äî ${nameR}`, 'info');
          this.lastLoggedGesturePair = pairLabel;
        }
      } else {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—ã –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∂–µ—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        this.currentPairLabel = null;
        this.lastLoggedGesturePair = null;
      }
    } else {
      // –û–±–∞ –∂–µ—Å—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã
      leftTextElem.textContent   = '–õ–µ–≤–∞—è: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';
      rightTextElem.textContent  = '–ü—Ä–∞–≤–∞—è: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';
      leftConfElem.textContent   = '‚Äî%';
      rightConfElem.textContent  = '‚Äî%';
      gestureTextElem.textContent = '–ñ–µ—Å—Ç—ã: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã';
      
      this.currentPairLabel = null;
      this.lastLoggedGesturePair = null;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –∂–µ—Å—Ç
    this.lastSingleLabel = null;
    this.lastLoggedSingle = null;

    // –†–∏—Å—É–µ–º –æ–±–µ —Ä—É–∫–∏
    this._drawSkeleton(landmarks);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
  requestAnimationFrame(() => this.startGestureLoop());
}


  processGestureResult(gestureLabel, score, allLandmarks) {
    const now = Date.now();
    // Check if the same gesture was seen recently (within 1s)
    if (gestureLabel === this.lastGesture && now - this.lastGestureTime < 1000) {
      this.gestureStabilityCount += 1;
    } else {
      this.gestureStabilityCount = 1;
    }
    this.lastGesture = gestureLabel;
    this.lastGestureTime = now;

    // If the gesture persisted for 3+ frames and confidence is high enough, treat as stable
    if (this.gestureStabilityCount >= 3 && score >= this.gestureThreshold) {
      this.handleStableGesture(gestureLabel, score);
    }

    // Update HUD text with the detected gesture (mapped to a friendly name if possible)
    const displayName = this.gestureMap[gestureLabel] || gestureLabel;
    document.getElementById('gestureText').textContent = `–ñ–µ—Å—Ç: ${displayName}`;
    document.getElementById('confidenceText').textContent = `–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(score * 100)}%`;

    // Draw landmarks on the canvas for feedback
    if (allLandmarks && this.canvasCtx) {
      this.canvasCtx.save();
      this.canvasCtx.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);
      // Draw the current video frame onto the canvas as background
      this.canvasCtx.drawImage(this.videoElement, 0, 0, this.canvasElement.width, this.canvasElement.height);
      // Draw hand landmarks and connections
      const drawingUtils = new DrawingUtils(this.canvasCtx);
      for (const landmarks of allLandmarks) {
        drawingUtils.drawConnectors(landmarks, GestureRecognizer.HAND_CONNECTIONS,
                                    { color: '#00FF00', lineWidth: 4 });
        drawingUtils.drawLandmarks(landmarks, { color: '#FF0000', lineWidth: 2 });
      }
      this.canvasCtx.restore();
    }
  }

  handleStableGesture(gestureLabel, confidence) {
    // Log stable gesture detection
    this.log(`–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∂–µ—Å—Ç: ${gestureLabel} (${Math.round(confidence * 100)}%)`, 'info');
    // (If voice command confirmation were active, we would handle thumbs-up/down here.
    // In gesture-only mode, no further action is required on stable gesture.)
  }

  // Toggle gesture recognition on/off
  toggleGestures() {
    this.isGestureActive = !this.isGestureActive;
    const btn = document.getElementById('toggleGestures');
    if (this.isGestureActive) {
      btn.textContent = 'ü§ö –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
      btn.classList.add('active');
      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ, –ø—Ä—è—á–µ–º –∑–∞–≥–ª—É—à–∫—É
      this.placeholderImg.style.display = 'none';
      this.videoElement.style.display   = 'block';
      this.canvasElement.style.display  = 'block';
      this.videoElement.play();         // –≤–¥—Ä—É–≥ –±—ã–ª–æ –Ω–∞ –ø–∞—É–∑–µ
      this.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ', 'info');
      // Start analyzing video frames for gestures
      this.startGestureLoop();
    } else {
      btn.textContent = 'ü§ö –ñ–µ—Å—Ç—ã';
      btn.classList.remove('active');
    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –ø—Ä—è—á–µ–º –≤–∏–¥–µ–æ + canvas
      this.placeholderImg.style.display = 'block';
      this.videoElement.style.display   = 'none';
      this.canvasElement.style.display  = 'none';
      this.videoElement.pause();
      this.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–æ', 'info');
      // (The gesture loop will exit on the next frame automatically)
    }
  }

  calibrate() {
    // Dummy calibration sequence (simulated)
    this.log('–ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...', 'info');
    this.updateStatus('processing', '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞...');
    setTimeout(() => {
      this.log('–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
      this.updateStatus('active', '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞');
    }, 2000);
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ updateStatus():
  updateStatus(status, text) {
    const indicator = document.getElementById('statusIndicator');
    const statusTextElem = document.getElementById('statusText');
  
    indicator.className = `status-indicator status-${status}`;
    statusTextElem.textContent = text;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥—ã
    const commandDisplay = document.getElementById('commandDisplay');
    const commandText = commandDisplay.querySelector('.command-text');
  
    if (status === 'processing') {
      commandText.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã...';
    } else if (status === 'active') {
      commandText.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤...';
    } else if (status === 'listening') {
      commandText.textContent = '–°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—ã...';
    }
}

  // –í –º–µ—Ç–æ–¥–µ log() –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫–∏:
log(message, type = 'info') {
  const logContainer = document.getElementById('logContainer');
  const entry = document.createElement('div');
  entry.className = `log-entry log-${type}`;
  
  let icon = '';
  switch(type) {
    case 'info': icon = '‚ÑπÔ∏è'; break;
    case 'success': icon = '‚úÖ'; break;
    case 'warning': icon = '‚ö†Ô∏è'; break;
    case 'error': icon = '‚ùå'; break;
  }
  
  entry.innerHTML = `
    <span class="log-icon">${icon}</span>
    <span class="log-time">[${new Date().toLocaleTimeString()}]</span>
    <span class="log-message">${message}</span>
  `;
  
  logContainer.insertBefore(entry, logContainer.firstChild);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ 50
  if (logContainer.children.length > 50) {
    logContainer.removeChild(logContainer.lastChild);
  }
}

  _drawSkeleton(allLandmarks) {
  this.canvasCtx.save();
  this.canvasCtx.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
  this.canvasCtx.scale(-1, 1);
  this.canvasCtx.translate(-this.canvasElement.width, 0);
  
  // –†–∏—Å—É–µ–º –≤–∏–¥–µ–æ
  this.canvasCtx.drawImage(
    this.videoElement,
    0, 0,
    this.canvasElement.width,
    this.canvasElement.height
  );
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è landmark'–æ–≤ –±–µ–∑ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  this.canvasCtx.restore();
  this.canvasCtx.save();
  
  const drawer = new DrawingUtils(this.canvasCtx);
  
  // –†–∏—Å—É–µ–º –º–∞–∫—Å–∏–º—É–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ä—É–∫–∏
  allLandmarks.slice(0, 2).forEach(landmarks => {
    // –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã landmark'–æ–≤
    const mirroredLandmarks = landmarks.map(landmark => ({
      x: 1 - landmark.x,  // –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º x –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
      y: landmark.y,
      z: landmark.z
    }));
    
    drawer.drawConnectors(
      mirroredLandmarks,
      GestureRecognizer.HAND_CONNECTIONS,
      { color: '#ffffff', lineWidth: 4 }
    );
    drawer.drawLandmarks(
      mirroredLandmarks,
      { color: '#b388eb', lineWidth: 2 }
    );
  });
  
  this.canvasCtx.restore();
}

clearLog() {
  const logContainer = document.getElementById('logContainer');
  logContainer.innerHTML = '';
  this.log('–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω', 'info');
}
}

// Initialize the app once the DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  new MonitorControlSPA();
});
