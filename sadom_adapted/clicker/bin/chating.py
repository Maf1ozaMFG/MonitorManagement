from screeninfo import get_monitors
from telebot import types
from threading import Thread

from clicker.bin.data_loader import get_presets
from clicker.bin.funcs import run_preset, send_report, init_browsers
from clicker.bin.glob import bot
import traceback


def create_preset_keyboard(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏"""
    kb = types.InlineKeyboardMarkup()
    presets = get_presets() or []

    for preset in presets:
        kb.add(types.InlineKeyboardButton(
            text=preset.get('preset', 'UNKNOWN'),
            callback_data=f"{user_id}_preset_{preset['preset']}"
        ))

    kb.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data=f"{user_id}_action_back"
    ))

    return kb


def create_main_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
    kb = types.InlineKeyboardMarkup(row_width=2)

    buttons = [
        ("üîÑ –ü—Ä–µ—Å–µ—Ç 1", "preset_1"),
        ("üîÑ –ü—Ä–µ—Å–µ—Ç 2", "preset_2"),
        ("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "stop"),
        ("üìä –°—Ç–∞—Ç—É—Å", "report")
    ]

    for text, action in buttons:
        kb.add(types.InlineKeyboardButton(
            text=text,
            callback_data=f"{user_id}_{action}"
        ))

    return kb


def start_control_chating(chat_id, user_id):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        bot.send_message(
            chat_id,
            "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏*",
            parse_mode="Markdown",
            reply_markup=create_main_keyboard(user_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω—é: {e}")


def create_monitor_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    kb = types.InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
    monitors = get_monitors()
    for i in range(len(monitors)):
        kb.add(types.InlineKeyboardButton(
            text=f"–ú–æ–Ω–∏—Ç–æ—Ä {i + 1}",
            callback_data=f"{user_id}_monitor_{i + 1}"
        ))

    # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã"
    kb.add(types.InlineKeyboardButton(
        text="–í—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã",
        callback_data=f"{user_id}_monitor_all"
    ))

    return kb


def handle_monitor_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    try:
        user_id = call.data.split('_')[0]
        monitor_id = call.data.split('_')[-1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞
        if str(call.from_user.id) != user_id:
            return

        if monitor_id == 'all':
            # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
            print("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            bot.answer_callback_query(call.id, "–†–∞–±–æ—Ç–∞—é —Å–æ –≤—Å–µ–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏...")
        else:
            # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
            print(f"–í—ã–±—Ä–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä {monitor_id}")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            bot.answer_callback_query(call.id, f"–†–∞–±–æ—Ç–∞—é —Å –º–æ–Ω–∏—Ç–æ—Ä–æ–º {monitor_id}...")

    except Exception as e:
        print(f"Monitor selection error: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞")


@bot.callback_query_handler(func=lambda call: call.data.split('_')[1] == 'monitor')
def monitor_callback_handler(call):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
    handle_monitor_selection(call)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        bot.answer_callback_query(call.id)

        if not call.data:
            return

        parts = call.data.split('_')
        if len(parts) < 2:
            return

        user_id = parts[0]
        action = '_'.join(parts[1:])

        if str(call.from_user.id) != user_id:
            return

        if action.startswith("preset_"):
            try:
                preset_id = action.split('_')[1]
                run_preset(preset_id)
                bot.send_message(call.message.chat.id, f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç {preset_id}")
            except Exception as e:
                bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        elif action == "report":
            send_report(call.message)

        elif action == "close":
            bot.delete_message(call.message.chat.id, call.message.message_id)

    except Exception as e:
        print(f"Callback error: {e}")
        traceback.print_exc()


def handle_preset(call, preset_name):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        msg = bot.send_message(call.message.chat.id, f"üîÑ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–µ—Å–µ—Ç *{preset_name}*...", parse_mode="Markdown")

        def apply_preset():
            try:
                run_preset(preset_name)
                bot.edit_message_text(
                    f"‚úÖ –ü—Ä–µ—Å–µ—Ç *{preset_name}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω",
                    chat_id=msg.chat.id,
                    message_id=msg.message_id,
                    parse_mode="Markdown"
                )
            except Exception as e:
                bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    chat_id=msg.chat.id,
                    message_id=msg.message_id
                )

        Thread(target=apply_preset).start()

    except Exception as e:
        print(f"Preset error: {e}")


def handle_action(call, action):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        if action == "select_monitor":
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=create_monitor_keyboard(call.from_user.id)
            )
        if action == 'show_presets':
            bot.edit_message_text(
                "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=create_preset_keyboard(call.from_user.id)
            )
        elif action == 'stop_monitoring':
            from clicker.bin.commands import stop_monitoring
            stop_monitoring(call.message)
        elif action == 'report':
            send_report(call.message)
        elif action == 'back':
            bot.edit_message_text(
                "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏*",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode="Markdown",
                reply_markup=create_main_keyboard(call.from_user.id)
            )
        elif action == 'close':
            bot.delete_message(call.message.chat.id, call.message.message_id)

    except Exception as e:
        print(f"Action error: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

def show_main_menu(call):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        bot.edit_message_text(
            "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=create_main_keyboard(call.from_user.id)
        )
    except Exception as e:
        print(f"Menu error: {e}")