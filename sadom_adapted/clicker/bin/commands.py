from threading import Thread

from clicker.bin.glob import *
from clicker.bin import glob
from clicker.bin.funcs import init_browsers, start_browsers, run_preset, allocate_browsers, send_report
from concurrent.futures import ThreadPoolExecutor
from telebot.types import BotCommand, Message
from clicker.bin.chating import start_control_chating

import atexit

executor = ThreadPoolExecutor(max_workers=4)
atexit.register(executor.shutdown, wait=False)

'''def start_monitoring(msg):
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±—Ä–∞—É–∑–µ—Ä–æ–≤"""
    init_browsers()
    start_browsers()
    allocate_browsers()
    run_preset('default')'''


def stop_monitoring(msg):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        status_msg = bot.send_message(msg.chat.id, "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–∫–Ω–∞...")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞
        for window in getattr(glob, 'all_windows', []):
            if hasattr(window, 'kill'):
                window.kill()

        bot.edit_message_text(
            "‚úÖ –í—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã",
            chat_id=status_msg.chat.id,
            message_id=status_msg.message_id
        )
    except Exception as e:
        print(f"Stop error: {e}")
        bot.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            chat_id=status_msg.chat.id,
            message_id=status_msg.message_id
        )

'''@bot.callback_query_handler(func=lambda call: call.data.startswith('mon_'))
def monitor_callback_wrapper(call):
    handle_monitor_selection(call)

@bot.message_handler(commands=['monitors'])
def show_monitor_menu(msg):
    bot.send_message(
        msg.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä:",
        reply_markup=create_monitor_buttons(msg.from_user.id)
    )'''

@bot.message_handler(commands=['control'])
def control(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /control"""
    try:
        start_control_chating(msg.chat.id, msg.from_user.id)
    except Exception as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['report'])
def report(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    try:
        send_report(msg)
    except Exception as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞: {str(e)}")


def install_update(msg: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    install_msg = bot.send_message(msg.chat.id, 'Updating...')
    if os.path.exists('received'):
        if len(os.listdir('received')) != 0:
            os.popen(f"start updater.exe update sadom {msg.chat.id} {token}")
            return
    bot.edit_message_text(chat_id=install_msg.chat.id,
                          message_id=install_msg.id,
                          text='Updating failed. No update files')


def hard_reset(msg: Message):
    """–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
    bot.send_message(msg.chat.id, 'Full restart')
    os.popen(f"start updater.exe restart sadom {msg.chat.id} {token}")


def remove_update(msg: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    delete_msg = bot.send_message(msg.chat.id, 'Delete update files...')
    if os.path.exists('received'):
        files = os.listdir('received')
        if len(files) != 0:
            map(os.remove, files)
        bot.edit_message_text(chat_id=delete_msg.chat.id,
                              message_id=delete_msg.id,
                              text=f'Deleted files: {", ".join(files)}')
        return
    bot.edit_message_text(chat_id=delete_msg.chat.id,
                          message_id=delete_msg.id,
                          text=f'Update files not found')


def set_bot_menu():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    command_desc = [
        BotCommand(command='/control', description='–ü—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
        BotCommand(command='/start_monitoring', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–∫–Ω–∞'),
        BotCommand(command='/stop_monitoring', description='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–∞'),
        BotCommand(command='/report', description='–°—Ç–∞—Ç—É—Å –æ–∫–æ–Ω'),
        BotCommand(command='/preset', description='–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç')
    ]

    try:
        bot.set_my_commands(command_desc)
        print("–ú–µ–Ω—é –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é: {e}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram
        bot.answer_callback_query(call.id)

        if not call.data:
            return

        user_id, action = call.data.split('_', 1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if str(call.from_user.id) != user_id:
            return

        if action == "preset_1":
            apply_preset("–ü–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ—Ç", call)
        elif action == "preset_2":
            apply_preset("–í—Ç–æ—Ä–æ–π –ø—Ä–µ—Å–µ—Ç", call)
        elif action == "stop":
            stop_monitoring(call.message)
        elif action == "report":
            send_report(call.message)

    except Exception as e:
        print(f"Callback error: {e}")


def apply_preset(preset_name, call):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    try:
        msg = bot.send_message(call.message.chat.id, f"üîÑ –ü—Ä–∏–º–µ–Ω—è—é {preset_name}...")

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread(target=lambda: (
            run_preset(preset_name),
            bot.edit_message_text(
                f"‚úÖ {preset_name} –ø—Ä–∏–º–µ–Ω–µ–Ω",
                chat_id=msg.chat.id,
                message_id=msg.message_id
            )
        )).start()

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

'''commands_list = [
    control,
    report,
    stop_monitoring,
    start_monitoring,
    install_update,
    remove_update,
    hard_reset
]'''

commands_list = [
    control,
    report,
    stop_monitoring,
    #start_monitoring
]


if __name__ == '__main__':
    pass
